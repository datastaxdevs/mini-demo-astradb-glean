"""
    Glean Indexing API

    # Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.   # noqa: E501

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from glean_indexing_api_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from glean_indexing_api_client.exceptions import ApiAttributeError


def lazy_import():
    from glean_indexing_api_client.model.additional_field_definition import AdditionalFieldDefinition
    from glean_indexing_api_client.model.datasource_profile import DatasourceProfile
    from glean_indexing_api_client.model.employee_team_info import EmployeeTeamInfo
    from glean_indexing_api_client.model.entity_relationship import EntityRelationship
    from glean_indexing_api_client.model.social_network_definition import SocialNetworkDefinition
    from glean_indexing_api_client.model.structured_location import StructuredLocation
    globals()['AdditionalFieldDefinition'] = AdditionalFieldDefinition
    globals()['DatasourceProfile'] = DatasourceProfile
    globals()['EmployeeTeamInfo'] = EmployeeTeamInfo
    globals()['EntityRelationship'] = EntityRelationship
    globals()['SocialNetworkDefinition'] = SocialNetworkDefinition
    globals()['StructuredLocation'] = StructuredLocation


class EmployeeInfoDefinition(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'email': (str,),  # noqa: E501
            'department': (str,),  # noqa: E501
            'first_name': (str,),  # noqa: E501
            'last_name': (str,),  # noqa: E501
            'preferred_name': (str,),  # noqa: E501
            'id': (str,),  # noqa: E501
            'phone_number': (str,),  # noqa: E501
            'location': (str,),  # noqa: E501
            'structured_location': (StructuredLocation,),  # noqa: E501
            'title': (str,),  # noqa: E501
            'photo_url': (str,),  # noqa: E501
            'business_unit': (str,),  # noqa: E501
            'datasource_profiles': ([DatasourceProfile],),  # noqa: E501
            'teams': ([EmployeeTeamInfo],),  # noqa: E501
            'start_date': (date,),  # noqa: E501
            'end_date': (date,),  # noqa: E501
            'bio': (str,),  # noqa: E501
            'pronoun': (str,),  # noqa: E501
            'also_known_as': ([str],),  # noqa: E501
            'profile_url': (str,),  # noqa: E501
            'social_networks': ([SocialNetworkDefinition],),  # noqa: E501
            'manager_email': (str,),  # noqa: E501
            'manager_id': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'relationships': ([EntityRelationship],),  # noqa: E501
            'status': (str,),  # noqa: E501
            'additional_fields': ([AdditionalFieldDefinition],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'email': 'email',  # noqa: E501
        'department': 'department',  # noqa: E501
        'first_name': 'firstName',  # noqa: E501
        'last_name': 'lastName',  # noqa: E501
        'preferred_name': 'preferredName',  # noqa: E501
        'id': 'id',  # noqa: E501
        'phone_number': 'phoneNumber',  # noqa: E501
        'location': 'location',  # noqa: E501
        'structured_location': 'structuredLocation',  # noqa: E501
        'title': 'title',  # noqa: E501
        'photo_url': 'photoUrl',  # noqa: E501
        'business_unit': 'businessUnit',  # noqa: E501
        'datasource_profiles': 'datasourceProfiles',  # noqa: E501
        'teams': 'teams',  # noqa: E501
        'start_date': 'startDate',  # noqa: E501
        'end_date': 'endDate',  # noqa: E501
        'bio': 'bio',  # noqa: E501
        'pronoun': 'pronoun',  # noqa: E501
        'also_known_as': 'alsoKnownAs',  # noqa: E501
        'profile_url': 'profileUrl',  # noqa: E501
        'social_networks': 'socialNetworks',  # noqa: E501
        'manager_email': 'managerEmail',  # noqa: E501
        'manager_id': 'managerId',  # noqa: E501
        'type': 'type',  # noqa: E501
        'relationships': 'relationships',  # noqa: E501
        'status': 'status',  # noqa: E501
        'additional_fields': 'additionalFields',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, email, department, *args, **kwargs):  # noqa: E501
        """EmployeeInfoDefinition - a model defined in OpenAPI

        Args:
            email (str): The employee's email
            department (str): An organizational unit where everyone has a similar task, e.g. `Engineering`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            first_name (str): The first name of the employee. **Note**: The value cannot be empty . [optional]  # noqa: E501
            last_name (str): The last name of the employee. **Note**: The value cannot be empty . [optional]  # noqa: E501
            preferred_name (str): The preferred name or nickname of the employee. [optional]  # noqa: E501
            id (str): **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`. . [optional]  # noqa: E501
            phone_number (str): The employee's phone number.. [optional]  # noqa: E501
            location (str): The employee's location (city/office name etc).. [optional]  # noqa: E501
            structured_location (StructuredLocation): [optional]  # noqa: E501
            title (str): The employee's role title.. [optional]  # noqa: E501
            photo_url (str): The employee's profile pic. [optional]  # noqa: E501
            business_unit (str): Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.. [optional]  # noqa: E501
            datasource_profiles ([DatasourceProfile]): The datasource profiles of the employee, e.g. `Slack`,`Github`.. [optional]  # noqa: E501
            teams ([EmployeeTeamInfo]): Info about the employee's team(s). [optional]  # noqa: E501
            start_date (date): The date when the employee started. [optional]  # noqa: E501
            end_date (date): If a former employee, the last date of employment.. [optional]  # noqa: E501
            bio (str): Short biography or mission statement of the employee.. [optional]  # noqa: E501
            pronoun (str): She/her, He/his or other pronoun.. [optional]  # noqa: E501
            also_known_as ([str]): Other names associated with the employee.. [optional]  # noqa: E501
            profile_url (str): Link to internal company person profile.. [optional]  # noqa: E501
            social_networks ([SocialNetworkDefinition]): List of social network profiles.. [optional]  # noqa: E501
            manager_email (str): The email of the employee's manager. [optional]  # noqa: E501
            manager_id (str): **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`. . [optional]  # noqa: E501
            type (str): The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`. [optional] if omitted the server will use the default value of "FULL_TIME"  # noqa: E501
            relationships ([EntityRelationship]): List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.. [optional]  # noqa: E501
            status (str): The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`. [optional] if omitted the server will use the default value of "CURRENT"  # noqa: E501
            additional_fields ([AdditionalFieldDefinition]): List of additional fields with more information about the employee.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.email = email
        self.department = department
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, email, department, *args, **kwargs):  # noqa: E501
        """EmployeeInfoDefinition - a model defined in OpenAPI

        Args:
            email (str): The employee's email
            department (str): An organizational unit where everyone has a similar task, e.g. `Engineering`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            first_name (str): The first name of the employee. **Note**: The value cannot be empty . [optional]  # noqa: E501
            last_name (str): The last name of the employee. **Note**: The value cannot be empty . [optional]  # noqa: E501
            preferred_name (str): The preferred name or nickname of the employee. [optional]  # noqa: E501
            id (str): **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`. . [optional]  # noqa: E501
            phone_number (str): The employee's phone number.. [optional]  # noqa: E501
            location (str): The employee's location (city/office name etc).. [optional]  # noqa: E501
            structured_location (StructuredLocation): [optional]  # noqa: E501
            title (str): The employee's role title.. [optional]  # noqa: E501
            photo_url (str): The employee's profile pic. [optional]  # noqa: E501
            business_unit (str): Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.. [optional]  # noqa: E501
            datasource_profiles ([DatasourceProfile]): The datasource profiles of the employee, e.g. `Slack`,`Github`.. [optional]  # noqa: E501
            teams ([EmployeeTeamInfo]): Info about the employee's team(s). [optional]  # noqa: E501
            start_date (date): The date when the employee started. [optional]  # noqa: E501
            end_date (date): If a former employee, the last date of employment.. [optional]  # noqa: E501
            bio (str): Short biography or mission statement of the employee.. [optional]  # noqa: E501
            pronoun (str): She/her, He/his or other pronoun.. [optional]  # noqa: E501
            also_known_as ([str]): Other names associated with the employee.. [optional]  # noqa: E501
            profile_url (str): Link to internal company person profile.. [optional]  # noqa: E501
            social_networks ([SocialNetworkDefinition]): List of social network profiles.. [optional]  # noqa: E501
            manager_email (str): The email of the employee's manager. [optional]  # noqa: E501
            manager_id (str): **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`. . [optional]  # noqa: E501
            type (str): The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`. [optional] if omitted the server will use the default value of "FULL_TIME"  # noqa: E501
            relationships ([EntityRelationship]): List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.. [optional]  # noqa: E501
            status (str): The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`. [optional] if omitted the server will use the default value of "CURRENT"  # noqa: E501
            additional_fields ([AdditionalFieldDefinition]): List of additional fields with more information about the employee.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.email = email
        self.department = department
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
