"""
    Glean Indexing API

    # Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.   # noqa: E501

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from glean_indexing_api_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from glean_indexing_api_client.exceptions import ApiAttributeError


def lazy_import():
    from glean_indexing_api_client.model.canonicalizing_regex_type import CanonicalizingRegexType
    from glean_indexing_api_client.model.connector_type import ConnectorType
    from glean_indexing_api_client.model.custom_datasource_config_all_of import CustomDatasourceConfigAllOf
    from glean_indexing_api_client.model.object_definition import ObjectDefinition
    from glean_indexing_api_client.model.quicklink import Quicklink
    from glean_indexing_api_client.model.shared_datasource_config_no_instance import SharedDatasourceConfigNoInstance
    globals()['CanonicalizingRegexType'] = CanonicalizingRegexType
    globals()['ConnectorType'] = ConnectorType
    globals()['CustomDatasourceConfigAllOf'] = CustomDatasourceConfigAllOf
    globals()['ObjectDefinition'] = ObjectDefinition
    globals()['Quicklink'] = Quicklink
    globals()['SharedDatasourceConfigNoInstance'] = SharedDatasourceConfigNoInstance


class CustomDatasourceConfig(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('datasource_category',): {
            'UNCATEGORIZED': "UNCATEGORIZED",
            'TICKETS': "TICKETS",
            'CRM': "CRM",
            'PUBLISHED_CONTENT': "PUBLISHED_CONTENT",
            'COLLABORATIVE_CONTENT': "COLLABORATIVE_CONTENT",
            'QUESTION_ANSWER': "QUESTION_ANSWER",
            'MESSAGING': "MESSAGING",
            'CODE_REPOSITORY': "CODE_REPOSITORY",
            'CHANGE_MANAGEMENT': "CHANGE_MANAGEMENT",
            'PEOPLE': "PEOPLE",
            'EMAIL': "EMAIL",
            'SSO': "SSO",
            'ATS': "ATS",
            'KNOWLEDGE_HUB': "KNOWLEDGE_HUB",
            'EXTERNAL_SHORTCUT': "EXTERNAL_SHORTCUT",
            'ENTITY': "ENTITY",
        },
        ('hide_built_in_facets',): {
            'TYPE': "TYPE",
            'TAG': "TAG",
            'AUTHOR': "AUTHOR",
            'OWNER': "OWNER",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'name': (str,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'datasource_category': (str,),  # noqa: E501
            'url_regex': (str,),  # noqa: E501
            'icon_url': (str,),  # noqa: E501
            'object_definitions': ([ObjectDefinition],),  # noqa: E501
            'suggestion_text': (str,),  # noqa: E501
            'home_url': (str,),  # noqa: E501
            'crawler_seed_urls': ([str],),  # noqa: E501
            'icon_dark_url': (str,),  # noqa: E501
            'hide_built_in_facets': ([str],),  # noqa: E501
            'canonicalizing_url_regex': ([CanonicalizingRegexType],),  # noqa: E501
            'canonicalizing_title_regex': ([CanonicalizingRegexType],),  # noqa: E501
            'redlist_title_regex': (str,),  # noqa: E501
            'connector_type': (ConnectorType,),  # noqa: E501
            'quicklinks': ([Quicklink],),  # noqa: E501
            'render_config_preset': (str,),  # noqa: E501
            'aliases': ([str],),  # noqa: E501
            'is_on_prem': (bool,),  # noqa: E501
            'trust_url_regex_for_view_activity': (bool,),  # noqa: E501
            'include_utm_source': (bool,),  # noqa: E501
            'strip_fragment_in_canonical_url': (bool,),  # noqa: E501
            'identity_datasource_name': (str,),  # noqa: E501
            'product_access_group': (str,),  # noqa: E501
            'is_user_referenced_by_email': (bool,),  # noqa: E501
            'is_entity_datasource': (bool,),  # noqa: E501
            'is_test_datasource': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'name': 'name',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'datasource_category': 'datasourceCategory',  # noqa: E501
        'url_regex': 'urlRegex',  # noqa: E501
        'icon_url': 'iconUrl',  # noqa: E501
        'object_definitions': 'objectDefinitions',  # noqa: E501
        'suggestion_text': 'suggestionText',  # noqa: E501
        'home_url': 'homeUrl',  # noqa: E501
        'crawler_seed_urls': 'crawlerSeedUrls',  # noqa: E501
        'icon_dark_url': 'iconDarkUrl',  # noqa: E501
        'hide_built_in_facets': 'hideBuiltInFacets',  # noqa: E501
        'canonicalizing_url_regex': 'canonicalizingURLRegex',  # noqa: E501
        'canonicalizing_title_regex': 'canonicalizingTitleRegex',  # noqa: E501
        'redlist_title_regex': 'redlistTitleRegex',  # noqa: E501
        'connector_type': 'connectorType',  # noqa: E501
        'quicklinks': 'quicklinks',  # noqa: E501
        'render_config_preset': 'renderConfigPreset',  # noqa: E501
        'aliases': 'aliases',  # noqa: E501
        'is_on_prem': 'isOnPrem',  # noqa: E501
        'trust_url_regex_for_view_activity': 'trustUrlRegexForViewActivity',  # noqa: E501
        'include_utm_source': 'includeUtmSource',  # noqa: E501
        'strip_fragment_in_canonical_url': 'stripFragmentInCanonicalUrl',  # noqa: E501
        'identity_datasource_name': 'identityDatasourceName',  # noqa: E501
        'product_access_group': 'productAccessGroup',  # noqa: E501
        'is_user_referenced_by_email': 'isUserReferencedByEmail',  # noqa: E501
        'is_entity_datasource': 'isEntityDatasource',  # noqa: E501
        'is_test_datasource': 'isTestDatasource',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """CustomDatasourceConfig - a model defined in OpenAPI

        Keyword Args:
            name (str): Unique identifier of datasource instance to which this config applies.
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            display_name (str): The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.. [optional]  # noqa: E501
            datasource_category (str): The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.. [optional] if omitted the server will use the default value of "UNCATEGORIZED"  # noqa: E501
            url_regex (str): Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**. [optional]  # noqa: E501
            icon_url (str): The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).. [optional]  # noqa: E501
            object_definitions ([ObjectDefinition]): The list of top-level `objectType`s for the datasource.. [optional]  # noqa: E501
            suggestion_text (str): Example text for what to search for in this datasource. [optional]  # noqa: E501
            home_url (str): The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.. [optional]  # noqa: E501
            crawler_seed_urls ([str]): This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.. [optional]  # noqa: E501
            icon_dark_url (str): The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).. [optional]  # noqa: E501
            hide_built_in_facets ([str]): List of built-in facet types that should be hidden for the datasource.. [optional]  # noqa: E501
            canonicalizing_url_regex ([CanonicalizingRegexType]): A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.. [optional]  # noqa: E501
            canonicalizing_title_regex ([CanonicalizingRegexType]): A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results. [optional]  # noqa: E501
            redlist_title_regex (str): A regex that identifies titles that should not be indexed. [optional]  # noqa: E501
            connector_type (ConnectorType): [optional]  # noqa: E501
            quicklinks ([Quicklink]): List of actions for this datasource instance that will show up in autocomplete and app card, e.g. \"Create new issue\" for jira. [optional]  # noqa: E501
            render_config_preset (str): The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details. [optional]  # noqa: E501
            aliases ([str]): Aliases that can be used as `app` operator-values.. [optional]  # noqa: E501
            is_on_prem (bool): Whether or not this datasource is hosted on-premise.. [optional]  # noqa: E501
            trust_url_regex_for_view_activity (bool): True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.. [optional] if omitted the server will use the default value of True  # noqa: E501
            include_utm_source (bool): If true, a utm_source query param will be added to outbound links to this datasource within Glean.. [optional]  # noqa: E501
            strip_fragment_in_canonical_url (bool): If true, the fragment part of the URL will be stripped when converting to a canonical url.. [optional] if omitted the server will use the default value of True  # noqa: E501
            identity_datasource_name (str): If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.. [optional]  # noqa: E501
            product_access_group (str): If the datasource uses a specific product access group, then the name of that group.. [optional]  # noqa: E501
            is_user_referenced_by_email (bool): whether email is used to reference users in document ACLs and in group memberships.. [optional]  # noqa: E501
            is_entity_datasource (bool): True if this datasource is used to push custom entities.. [optional] if omitted the server will use the default value of False  # noqa: E501
            is_test_datasource (bool): True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.. [optional] if omitted the server will use the default value of False  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """CustomDatasourceConfig - a model defined in OpenAPI

        Keyword Args:
            name (str): Unique identifier of datasource instance to which this config applies.
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            display_name (str): The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.. [optional]  # noqa: E501
            datasource_category (str): The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.. [optional] if omitted the server will use the default value of "UNCATEGORIZED"  # noqa: E501
            url_regex (str): Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**. [optional]  # noqa: E501
            icon_url (str): The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).. [optional]  # noqa: E501
            object_definitions ([ObjectDefinition]): The list of top-level `objectType`s for the datasource.. [optional]  # noqa: E501
            suggestion_text (str): Example text for what to search for in this datasource. [optional]  # noqa: E501
            home_url (str): The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.. [optional]  # noqa: E501
            crawler_seed_urls ([str]): This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.. [optional]  # noqa: E501
            icon_dark_url (str): The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).. [optional]  # noqa: E501
            hide_built_in_facets ([str]): List of built-in facet types that should be hidden for the datasource.. [optional]  # noqa: E501
            canonicalizing_url_regex ([CanonicalizingRegexType]): A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.. [optional]  # noqa: E501
            canonicalizing_title_regex ([CanonicalizingRegexType]): A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results. [optional]  # noqa: E501
            redlist_title_regex (str): A regex that identifies titles that should not be indexed. [optional]  # noqa: E501
            connector_type (ConnectorType): [optional]  # noqa: E501
            quicklinks ([Quicklink]): List of actions for this datasource instance that will show up in autocomplete and app card, e.g. \"Create new issue\" for jira. [optional]  # noqa: E501
            render_config_preset (str): The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details. [optional]  # noqa: E501
            aliases ([str]): Aliases that can be used as `app` operator-values.. [optional]  # noqa: E501
            is_on_prem (bool): Whether or not this datasource is hosted on-premise.. [optional]  # noqa: E501
            trust_url_regex_for_view_activity (bool): True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.. [optional] if omitted the server will use the default value of True  # noqa: E501
            include_utm_source (bool): If true, a utm_source query param will be added to outbound links to this datasource within Glean.. [optional]  # noqa: E501
            strip_fragment_in_canonical_url (bool): If true, the fragment part of the URL will be stripped when converting to a canonical url.. [optional] if omitted the server will use the default value of True  # noqa: E501
            identity_datasource_name (str): If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.. [optional]  # noqa: E501
            product_access_group (str): If the datasource uses a specific product access group, then the name of that group.. [optional]  # noqa: E501
            is_user_referenced_by_email (bool): whether email is used to reference users in document ACLs and in group memberships.. [optional]  # noqa: E501
            is_entity_datasource (bool): True if this datasource is used to push custom entities.. [optional] if omitted the server will use the default value of False  # noqa: E501
            is_test_datasource (bool): True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.. [optional] if omitted the server will use the default value of False  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              CustomDatasourceConfigAllOf,
              SharedDatasourceConfigNoInstance,
          ],
          'oneOf': [
          ],
        }
